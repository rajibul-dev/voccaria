I'm hiding the todo.txt but this its exact content, but that todo.txt is where I do many of my thinking so it updates very frequently. I'll update this showcase-version-todo.txt once in a while, that means it's not going to be that up-to-date to-do tracking for anyone checking this.
-------------------------------

### Blog
[x] add colors
[x] create the color variables
[x] place the links
[x] design in two ways conditionally, for '/' scaling is 62.5%
[x] create the sanity backend
[x] create the queries!
[x] get running with the blog index page
[x] implement dark mode, much necessary
[x] fetch and render from sanity
[x] get running with the post page
[x] get running with the Search feature
[x] for the search feature, make the right keys in fuze.js, and different propertynames since same array has two types of objects
[x] complete all the functinal logic for the Search feature
[x] display the matching headings and paragraphs when searching
[x] search bar on the navbar for blog post page
[x] make the sidebar (discord みたい)
[x] load blog pages faster (feel faster, route faster)
[x] make the LoadMoreButton and Blog card reusable
[x] render category sorted posts on index page
[x] graceful error handling for all the stuff
[x] implement perfect SEO
[x] create footer
nice to add:
[] scroll to the searched word
[] routing progress line on the top
[] post page can go to next and prev post with at the button


### Authentication
deploy major updates whiile hiding blog
[x] "before-blog-visible" branch name for the launch. It will need time for Mia to prepare the blog contents.
[x] Get local mongodb GUI
[x] Connect to the database
[x] Create user models, including OAuth users
[x] User controllers, auth controllers
[x] finalizing auth with passport, sessions, database session store
[x] integration tests with postman
[x] Password forgetting, reseting, and changing feature
[x] bug fix of the above
[x] google OAuth implementation
[x] user CRUDs
[x] discord connect implementation
[x] Avatar implementation, cloud storage setup
[] Authentication UI design
[] Research auth based UIs
[] Profile page design
[] handle navigation bar situation


### Scheduler

## Students Setting Their Availability

- [] Think of route path structure:
  - `GET /schedule/availability`
  - `POST /schedule/availability`
  - `PATCH /schedule/availability`
  - `DELETE /schedule/availability` (optional)

- [] Think of data model structure:
  - `StudentAvailability`:
    - `userId: ObjectId`
    - `day: String` – e.g., "Monday"
    - `startTime: String` – "13:00"
    - `endTime: String` – "14:00"
    - `timezone: String`
    - `repeatWeekly: Boolean`

- [] Implement its Controllers

- [] Mia with students' availability (admin):
  - `GET /schedule/admin/students-availability`
  - `POST /schedule/admin/students-availability/block`:
  - `GET /schedule/admin/students-availability/:id`
  - `POST /schedule/admin/students-availability/:id` – overwrite availability
    - `startTime: "14:00"`
    - `endTime: "16:00"`
    - `repeatEveryday: true`
    - `days: null | ["Monday", "Wednesday"] | "Sunday"`
    - `reason: String` (optional)
    

## Mia Setting Her Schedule (Booking Availability)

- [] Think about route path structure:
  - `GET /schedule/mia/slots`
  - `POST /schedule/mia/slots`
  - `PATCH /schedule/mia/slots/:slotId`
  - `DELETE /schedule/mia/slots/:slotId`
  - `POST /schedule/mia/slot` -> realtime syncing
  - `PATCH /schedule/mia/slot` -> realtime syncing
  - `DELETE /schedule/mia/slot` -> single slot remove

- [] Data model:
  - `MiaScheduleSlot`:
    - `day: String`
    - `startTime: String`
    - `endTime: String`
    - `timezone: String`
    - `available: Boolean`
    - `repeatWeekly: Boolean`

- [] Implement its Controllers


## Students Booking Lessons

- [] Think about route path structure:
  - View available times to book `GET /schedule/mia/slots`
  - `POST /schedule/booking`
  - `GET /schedule/booking/:bookingId` - check booking details
  - `PATCH /schedule/booking/:bookingId`

- [] Data model:
  - `LessonBooking`:
    - `studentId: ObjectId`
    - `miaSlotId: ObjectId`
    - `scheduledTime: Date`
    - `paymentStatus: "paid" | "pending"`
    - `bookingStatus: "booked" | "cancelled" | "completed"`
    - `createdAt`, `updatedAt`

- [] Integrate with payment system for booking confirmation
- [] implement its controllers

## Mia with the bookings

- [] Route path structure:
  - `GET /schedule/mia/bookings` — list of all bookings
  - `GET /schedule/mia/bookings/:bookingId` — details of a specific booking
  - `PATCH /schedule/mia/bookings/:bookingId` — update status, notes, etc.
  - `DELETE /schedule/mia/bookings/:bookingId` — cancel booking (admin-level)


### Video/Voice call feature for Voccaria!